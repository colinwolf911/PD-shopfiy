{% comment %}Namogoo Snippet{% endcomment %}
<script type="text/javascript" async> (() => { const cfgKey = "namogooDataLayer", categoriesCfgKey = "NmgDLProductCategories"; let userData = {}, siteData = {}, productData = {}, cartData = {}, searchProductsData = [], categoryProductsData = [], categoryData = {}; let utils = { objectIsEmpty: (obj) => { if (Array.isArray(obj)) { return obj.length === 0; } return Object.keys(obj).length === 0 && obj.constructor === Object; } }; let page = { href: () => window.location.href, pageType: () => { let pType = "{{ request.page_type }}"; switch (pType) { case '404': case 'password': case 'list-collections': { return 'Other'; } case 'article': case 'blog': case 'page': { return 'Content Page'; } case 'cart': { return 'Cart'; } case 'collection': { return 'Category'; } case 'customers/account': case 'customers/reset_password': { return 'Account'; } case 'customers/activate_account': case 'customers/addresses': case 'customers/login': case 'customers/register': { return 'Customer Service' } case 'customers/order': { return 'Order Details'; } case 'gift_card': { return 'Promotion'; } case 'product': { return 'Product'; } case 'index': { return 'Homepage'; } case 'search': { return 'Search'; } } let href = page.href(); if (href.includes("/cart")) { return 'Cart'; } else if (href.includes("/account")) { return 'Account'; } else if (href.includes("/thank_you")) { return 'Order Confirmation'; } else if (href.includes("/orders/")) { return 'Order Details'; } else if (href.includes("/checkout")) { return 'Checkout'; } else { return 'Other'; } }, requiredDataLayerGroups: () => { let pt = page.pageType(); let groups = ['userData', 'siteData', 'cartData']; if (pt === 'Product'){ groups.push('productData'); } else if (pt === 'Category'){ groups.push('categoryData', 'categoryProductsData'); } else if (pt === 'Search'){ groups.push('searchProductsData'); } return groups; }, td: () => window.ShopifyAnalytics.lib.trekkie.defaultAttributes, meta: () => window.ShopifyAnalytics.meta, get: { user: { uniqToken: () => page.td().uniqToken, visitToken: () => page.td().visitToken, id: () => __st.cid, }, }, set: { userData: () => { userData.guestUserId = page.get.user.uniqToken(); userData.sessionId = page.get.user.visitToken(); let userId = page.get.user.id(); if (userId){ userData.userId = userId; userData.loginType = 'logged in user'; } else { userData.userId = ''; userData.loginType = 'guest user'; } }, siteData: () => { siteData.local = "{{ request.locale.iso_code }}"; siteData.language = document.documentElement.lang; siteData.currency = "{{ shop.currency }}"; siteData.shopCurrency = "{{ shop.currency }}"; let currency = window.Currency ? window.Currency.currentCurrency : ''; siteData.cartCurrency = currency || "{{ cart.currency.iso_code }}"; siteData.pageType = page.pageType(); siteData.timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone; {%- if search and search.performed -%} siteData.searchTerms = "{{ search.terms }}"; {%- endif -%} }, productData: () => { {%- if product -%} let selectedVariantId = page.meta().selectedVariantId || {{ product.selected_or_first_available_variant.id }}; let allVariants = [ {%- for variant in product.variants -%} { sku: {{ variant.sku | json }}, id: {{ variant.id }}, salePrice: {{ variant.price }}, originalPrice: {{ variant.price }}, available: {{ variant.available }}, quantity: {{ variant.inventory_quantity }}, }, {%- endfor -%} ]; let selectedVariant = allVariants.filter(v => v.id == selectedVariantId)[0] || {}; productData.sku = selectedVariant.sku || ''; productData.id = {{ product.id }}; productData.variantId = selectedVariant.id; productData.title = "{{ product.title | escape }}"; productData.brand = "{{ product.vendor | escape }}"; productData.salePrice = selectedVariant.salePrice / 100 + ''; productData.originalPrice = selectedVariant.originalPrice / 100 + ''; productData.quantity = selectedVariant.quantity; productData.inStock = selectedVariant.available; productData.imageUrl = "{{ product | img_url }}"; let productCollections = [ {%- if product.collections -%} {%- for collection in product.collections -%} { id: "{{ collection.id }}", handle: "{{ collection.handle }}", title: "{{ collection.title }}" }, {%- endfor -%} {%- elsif collection -%} { id: "{{ collection.id }}", handle: "{{ collection.handle }}", title: "{{ collection.title }}" } {%- endif -%} ]; productData.categoryIds = []; productData.categoryNames = []; productData.categoryHandles = []; productCollections.forEach(collection => { productData.categoryIds.push(collection.id); productData.categoryNames.push(collection.title); productData.categoryHandles.push(collection.handle); }); {%- endif -%} }, cartData: () => { cartData.total = {{ cart.total_price }} / 100 + ''; cartData.subTotal = {{ cart.items_subtotal_price }} / 100 + ''; {% assign discounts = cart.cart_level_discount_applications | default: cart.discount_applications %} {%- for dscnt in discounts -%} cartData.discountData = { id: "{{ dscnt.key }}", name: "{{ dscnt.title | escape }}", discountType: "{{ dscnt.type }}", totalAmount: {{ dscnt.total_allocated_amount }} / 100 + '', value: "{{ dscnt.value }}", valueType: "{{ dscnt.value_type }}", }; {% break %} {%- endfor -%} {%- if cart.item_count -%} cartData.items = [ {%- for item in cart.items -%} { sku: "{{ item.sku }}", id: {{ item.product_id }}, variantId: {{ item.id }}, title: "{{ item.title | ecsape }}", brand: "{{ item.vendor | escape}}", price: {{ item.price }} / 100 + '', originalPrice: {{ item.price }} / 100 + '', salePrice: {{ item.discounted_price }} / 100 + '', quantity: {{ item.quantity }}, imageUrl: "{{ item | img_url }}", inStock: true, {%- if item.product.collections -%} {%- assign categoryIds = '' -%} {%- assign categoryNames = '' -%} {%- assign categoryHandles = '' -%} {%- for collection in item.product.collections -%} {%- assign categoryIds = categoryIds | append: collection.id | append: ' ,|!|, ' -%} {%- assign categoryNames = categoryNames | append: collection.title | escape | append: ' ,|!|, ' -%} {%- assign categoryHandles = categoryHandles | append: collection.handle | append: ' ,|!|, ' -%} {%- endfor -%} categoryIds: {{ categoryIds | split: ' ,|!|, ' | json }}, categoryNames: {{ categoryNames | split: ' ,|!|, ' | json }}, categoryHandles: {{ categoryHandles | split: ' ,|!|, ' | json }}, {%- else -%} categoryIds: [], categoryNames: [], categoryHandles: [], {%- endif -%} {% if item.discounts.size > 0 %} discountData: { amount: {{ item.discounts[0].amount | default: 0 }} / 100 + '', title: {{ item.discounts[0].title | json }}, }, {% endif %} }, {%- endfor -%} ]; let productCategoriesData = {}; cartData.items.forEach(item => { productCategoriesData[item.variantId] = { categoryIds: item.categoryIds, categoryNames: item.categoryNames, categoryHandles: item.categoryHandles, } }); localStorage.setItem(categoriesCfgKey, JSON.stringify(productCategoriesData)); {%- endif -%} cartData.totalQuantity = {{ cart.item_count }}; }, categoryData: () => { {%- if request.page_type == 'collection' -%} {%- assign collection = collections[handle] -%} categoryData.id = "{{ collection.id }}"; categoryData.handle = "{{ collection.handle }}"; categoryData.title = "{{ collection.title }}"; {%- endif -%} }, categoryProductsData: () => { categoryProductsData.length = 0; {%- if request.page_type == 'collection' -%} {%- assign collection = collections[handle] -%} {%- if collection.products -%} let product = {}, firstVariant = {}, variants = [], productCollections = []; {%- for product in collection.products -%} productCollections = [ {%- if product.collections -%} {%- for collection in product.collections -%} { id: "{{ collection.id }}", handle: "{{ collection.handle }}", title: "{{ collection.title }}" }, {%- endfor -%} {%- endif -%} ]; product = { id: {{ product.id }}, title: `{{ product.title }}`, brand: `{{ product.vendor }}`, imageUrl: "{{ product | img_url }}", categoryIds: productCollections ? productCollections.map(collection => collection.id) : [], categoryNames: productCollections ? productCollections.map(collection => collection.title) : [], categoryHandles: productCollections ? productCollections.map(collection => collection.handle) : [], {%- if product.variants.size == 1 -%} {% assign variant = product.variants[0] %} sku: {{ variant.sku | json }}, variantId: {{ variant.id }}, salePrice: {{ variant.price }} / 100 + '', originalPrice: {{ variant.price }} / 100 + '', inStock: {{ variant.available }}, quantity: {{ variant.inventory_quantity }}, variants: [], }; {%- else -%} }; firstVariant = { {%- assign variant = product.selected_or_first_available_variant -%} sku: {{ variant.sku | json }}, variantId: {{ variant.id }}, salePrice: {{ variant.price }} / 100 + '', originalPrice: {{ variant.price }} / 100 + '', inStock: {{ variant.available }}, quantity: {{ variant.inventory_quantity }}, }; variants = [ {%- for variant in product.variants -%} {%- if variant.id == product.selected_or_first_available_variant.id -%} {%- continue -%} {%- endif -%} { sku: {{ variant.sku | json }}, variantId: {{ variant.id }}, salePrice: {{ variant.price }} / 100 + '', originalPrice: {{ variant.price }} / 100 + '', inStock: {{ variant.available }}, quantity: {{ variant.inventory_quantity }}, }, {%- endfor -%} ]; product.variants = variants.map(v => {return {...product, ...v}}); product = {...product, ...firstVariant}; {%- endif -%} categoryProductsData.push({...product}); {%- endfor -%} {%- else -%} categoryProductsData.push({}); {%- endif -%} {%- endif -%} }, searchProductsData: () => { searchProductsData.length = 0; {%- if request.page_type == 'search' -%} {%- if search and search.performed -%} let searchResult = {}, searchResultFirstVariant = {}, searchResultVariants = [], searchResultCollections = []; {%- for product in search.results -%} {%- if product.object_type != "product" -%} {%- continue -%} {%- endif -%} searchResultCollections = [ {%- if product.collections -%} {%- for collection in product.collections -%} { id: "{{ collection.id }}", handle: "{{ collection.handle }}", title: "{{ collection.title }}" }, {%- endfor -%} {%- endif -%} ]; searchResult = { id: {{ product.id }}, title: `{{ product.title }}`, brand: `{{ product.vendor }}`, imageUrl: "{{ product | img_url }}", categoryIds: searchResultCollections ? searchResultCollections.map(collection => collection.id) : [], categoryNames: searchResultCollections ? searchResultCollections.map(collection => collection.title) : [], categoryHandles: searchResultCollections ? searchResultCollections.map(collection => collection.handle) : [], {%- if product.variants.size == 1 -%} {% assign variant = product.variants[0] %} sku: {{ variant.sku | json }}, variantId: {{ variant.id }}, salePrice: {{ variant.price }} / 100 + '', originalPrice: {{ variant.price }} / 100 + '', inStock: {{ variant.available }}, quantity: {{ variant.inventory_quantity }}, variants: [], }; {%- else -%} }; searchResultFirstVariant = { {%- assign variant = product.selected_or_first_available_variant -%} sku: {{ variant.sku | json }}, variantId: {{ variant.id }}, salePrice: {{ variant.price }} / 100 + '', originalPrice: {{ variant.price }} / 100 + '', inStock: {{ variant.available }}, quantity: {{ variant.inventory_quantity }}, }; searchResultVariants = [ {%- for variant in product.variants -%} {%- if variant.id == product.selected_or_first_available_variant.id -%} {%- continue -%} {%- endif -%} { sku: {{ variant.sku | json }}, variantId: {{ variant.id }}, salePrice: {{ variant.price }} / 100 + '', originalPrice: {{ variant.price }} / 100 + '', inStock: {{ variant.available }}, quantity: {{ variant.inventory_quantity }}, }, {%- endfor -%} ]; searchResult.variants = searchResultVariants.map(v => {return {...searchResult, ...v}}); searchResult = {...searchResult, ...searchResultFirstVariant}; {%- endif -%} searchProductsData.push({...searchResult}); {%- else -%} searchProductsData.push({}); {%- endfor -%} {%- endif -%} {%- endif -%} }, } }; let setRequiredGroupsData = () => { let requiredDataLayerGroups = page.requiredDataLayerGroups(); requiredDataLayerGroups.forEach((item, index) => { if (utils.objectIsEmpty(eval(item))){ try { page.set[item]() } catch (e) { } } }); }; let setLog = (groupsList) => { let log = {}; groupsList.forEach((item, index) => { if (['userData', 'siteData', 'cartData', 'categoryData'].includes(item)){ log[item] = eval(item) } else if (['categoryProductsData', 'searchProductsData'].includes(item)){ log['items'] = eval(item) } else if (item === 'productData'){ log['items'] = [eval(item)] } }); window[cfgKey] = [log] }; let interval; let perform = (i=1000) => { interval = setInterval(() => { setRequiredGroupsData(); let c = 0; let requiredGroups = page.requiredDataLayerGroups(); requiredGroups.forEach((item, index) => { if (!utils.objectIsEmpty(eval(item))){ c++ } }); if (requiredGroups.length === c){ clearInterval(interval); setLog(requiredGroups) } }, i) }; perform(); let initialHref = window.location.href; let trackUrl = setInterval(() => { if (page.href() !== initialHref){ initialHref = page.href(); userData = {}; siteData = {}; productData = {}; cartData = {} ; searchProductsData = []; categoryProductsData = []; categoryData = {}; perform() } }, 1000) })();
</script>
{% comment %}END of Namogoo Snippet{% endcomment %}
<ul class="links">
  {%- if settings.header_design == 'type16' -%}
  <li>
    <a id='header-compare' href="javascript:;" ><i class="icon-compare-link"></i><span {% if settings.language_enable %}data-translate="header.settings.compare"{% endif %}>{{'header.settings.compare' | t}}</span> <span class='compareCount'>(0)</span></a>
  </li>
  {%- endif -%}
  {%- if section.blocks.size > 0 -%}
  {%- for block in section.blocks -%}
  {%- case block.type -%}
  {%- when 'menu_wishlist' -%}
  <li {% if forloop.last %}class="last"{% endif %}>
    <a id='header-wishlist' href="javascript:;">
      <span>
        {%- if settings.language_enable -%}
        <span class="lang1">{{ block.settings.title | split: '|' | first }}</span>
        <span class="lang2">{{ block.settings.title | split: '|' | last }}</span>
        {%- else -%}
        {{ block.settings.title | split: '|' | first }}
        {%- endif -%}
      </span>
      <span class='wishlistCount'></span>
    </a>
  </li>
  {%- when 'menu_login' -%}
  <li {% if forloop.last %}class="last"{% endif %}>
    {%- if customer -%}
    <a href="/account/logout" {% if settings.language_enable %}data-translate="header.settings.logout"{% endif %}>{{ 'header.settings.logout' | t }}</a>
    {%- else -%}
    <a href="/account/login">
      {%- if settings.language_enable -%}
      <span class="lang1">{{ block.settings.title | split: '|' | first }}</span>
      <span class="lang2">{{ block.settings.title | split: '|' | last }}</span>
      {%- else -%}
      {{ block.settings.title | split: '|' | first }}
      {%- endif -%}
    </a>
    {%- endif -%}
  </li>
  {%- when 'html' -%}
  <li class="d-none d-lg-block {% if forloop.last %}last{% endif %}">
    {%- if settings.language_enable -%}
    <span class="lang1">{{ block.settings.html | split: '[lang2]' | first }}</span>
    <span class="lang2">{{ block.settings.html | split: '[lang2]' | last }}</span>
    {%- else -%}
    {{ block.settings.html | split: '[lang2]' | first }}
    {%- endif -%}
  </li>
  {%- else -%}
  {%- if block.settings.button_link != blank and block.settings.title != blank -%}
  <li {% if forloop.last %}class="last"{% endif %}>
    <a href="{{block.settings.button_link}}">
      {%- if settings.language_enable -%}
      <span class="lang1">{{ block.settings.title | split: '|' | first }}</span>
      <span class="lang2">{{ block.settings.title | split: '|' | last }}</span>
      {%- else -%}
      {{ block.settings.title | split: '|' | first }}
      {%- endif -%}
    </a>
  </li>
  {%- endif -%}
  {%- endcase -%}
  {%- endfor -%}
  {%- endif -%}
</ul>
{% schema %}
{
  "name": "Top Link Menu",
  "blocks": [
    {
      "type": "menu_wishlist",
      "name": "Link Wishlist",
      "limit": 1,
        "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Title",
          "default": "My Wishlist"
        }
      ]
    },
    {
      "type": "menu_login",
      "name": "Link Login",
      "limit": 1,
        "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Title",
          "default": "Login"
        }
      ]
    },
    {
      "type":"menu_item",
      "name":"Add Items",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Navigation Title",
          "default": "Contact Us"
        },
        {
          "type": "url",
          "id": "button_link",
          "label": "Navigation link"
        }
      ]
    },
    {
      "type": "html",
      "name": "Custom Text",
        "settings": [
        {
          "type": "text",
          "id": "html",
          "label": "Custom Text",
          "default": "DEFAULT WELCOME MSG!"
        }
      ]
    }
  ]
}
{% endschema %}